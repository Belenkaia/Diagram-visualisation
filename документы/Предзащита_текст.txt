1.
Здравствуйте. Меня зовут Беленькая София, и я расскажу о разработке программного модуля визуализации диаграмм процессов по спецификации на языке Reflex. Работа велась под руководством Зюбина Владимира Евгеньевича в соруководстве с Розовым Андреем Сергеевичем.

2. 
При разработке и поддержке программного обеспечения в рамках итеративной модели встает задача реверсивного инжиниринга и рефакторинга кода. Возникает необходимость создания документации по имеющемуся исходному коду программ, в первую очередь, графической документации. Для распространенных объектно-ориентированных языков (Java, C++, С# и др.) уже реализовано множество программных средств, автоматизирующих этот процесс и входящих в IDE.
В то же время, для  промышленной автоматизации, написании управляющих алгоритмов и программировании встраиваемых систем вопрос разработки средств анализа исходного кода стоит очень остро: здесь используются либо проблемно-ориентированные языки (DSL), либо языки общего назначения в роли низкоуровневого средства. В том числе эта проблема актуальна и для активно развивающегося процесс-ориентированного программирования (ПОП), которое разрабатывается в Институте автоматики и электрометрии. В текущих проектах анализ исходного кода делается вручную, что очень трудоемко, а создаваемая при этом документация содержит ошибки. В связи с этим для ПОП остро стоит задача автоматизации процесса создания графической документации, а именно, построения диаграмм по исходному коду программы. В качестве языка программирования в работе рассматривался язык Reflex

3.
Целью работы является разработка программного модуля построения диаграмм процессов по спецификации на языке Reflex. В рамках работы решались следующие задачи:
Провести анализ:
-специфики языка Reflex;
- диаграмм, использующихся для анализа кода;
- средств визуализации диаграмм для языков общего назначения.
спроектировать систему:
-сформулировать требования к создаваемому программному модулю;
-разработать диаграммы для отображения связей процессов;
-определить формат представления диаграмм;
разработать архитектуру модуля, реализовать модуль визуализации;
провести тестирование созданной реализации

4. 
Была рассмотрена специфика языка Рефлекс.
Программа, фрагмент которой приведен на слайде, состоит из описания процессов, начинающихся с ключевого слова proc. Процессы представлены автомататами состояний. Состояния описываются сходными с языком Си конструкциями. При описании процесса можно указать импортируемые из других процессов переменные через ключевые слова from proc. Процессы могут запускать и останавливать другие процессы. Исполнение процессов происходит в рамках кооперативной модели многопоточности.

5. 
Был проведен сравнительный анализ средств визуализации диаграмм для языков общего назначения, результат которого представлен на слайде. Зеленым цветом помечены удовлетворяющие криериям сравнения признаки, а красным - не удовлетворяющие. Можно видеть, что не все средства предоставляют возможность кодогенерации и динамического построения диаграмм, а также возможность сокрытия компонентов диаграммы. При этом в рассмотрении участвовали только средства, предоставляющие возможность реверсивного инжиниринга, то есть построения диаграмм по коду. Все они поддерживают возможность модификации диаграмм.

6.
проведенный анализ показывает, что среди средств разработки систем управления и по для встраивамых систем очень малый процент средств разработки предоставляет возможность реверсивного инжиниринга, в том числе это справедливо для средств, предназначенных для коммерческого использования. В основном, реверсивный инжиниринг поддерживают объектно-ориентированные скада-пакеты, которые лишь условно относятся к рассматриваемой области.

7.
На основании процеденного анализа были сформулированы следующие требования к средству визуализации диаграмм:
Возможность редактирования диаграмм
Автоматическая укладка диаграмм на плоскость. 
Обеспечение построения следующих диаграмм:
-Диаграмм состояний процесса.
-Диаграмм связи процессов по данным.
-Диаграмм связи процессов по управлению.
Возможность сохранения диаграммы в отдельный файл
Автоматическое разделение диаграмм, не имеющих общих вершин, на разные файлы

8.
Диаграмму состояний процесса предложено отображать в виде диаграммы состояний UML. Пример такой диаграммы для программы управления микроволновкой представлен на слайде. внутри вершин расположены названия состояний, соединенные стрелками переходов, над которыми указывается в квадратных скобках ограждающее выражение, те условие перехода , а после косой черты указываются действия, выполняемые при переходе в данное состояние.
9.
Для построения диаграмм связи процессов по данным предложено использовать нотацию, разработанную на основе модифицированной диаграммы деятельности и состояний UML. В вершинах прямоугольной формы отображаются названия процессов, соединенных с овальными вершинами, внутри которых указаны названия разделяемых переменных. Над стрелкой подписывается тип взаимодействия - имортирование(с ключевым словом import) или объявление (те declare)
10.
Для построения диаграмм связи процессов по управлению были модифицированы:
диаграмма деятельности UML( откуда заимствован общий вид вершин диаграммы), и диаграмма состояний UML, из нотации которой использованы:
- идея подписей над стрелками и обозначение точки входа

Внутри вершин указаны названия процессов. Вершины соединены стрелками, отражающими связь по упралению, причем тип связи указан над стрелкой с помощью ключевых слов старт и стоп

11.
 Для определения формата хранения генерируемых диаграмм был проведен обзор форматов представления графов. При этом рассматривался такой критерий, как возможность хранения координат, чтобы после автоматической укладки графа на плоскость сторонними средствами, положения его вершин сохранились при повторном открытии файла. Также учитывалась возможность использовать формы вершин, отвечающие разработанным нотациям диаграмм. Была учтена возможность использования подписей над ребрами и проанализированы поддерживающие данный формат средства визуализации графов.
При выборе формата также рассматривалась возможность его конвертации в другие форматы. По представленному на слайде графу видно, что существует два не связанных семейства форматов, внутри которых возможна конвертация.

12. В результате более детального рассмотрения наиболее подходящих по всем критериям форматов GML и GraphML, GML был выбран для сохранения диаграмм состояний процесса, так одни и те же диаграммы в этом формате почти в два раза меньше по размеру, чем в формате GraphML. При этом диаграмма состояний создается для каждого процесса.
Для сохранения диаграмм связи процессов по данным и по управлению был выбран формат GraphML, так как он позволяет в вершинах процессов хранить ссылки на диаграммы состояний этих процессов. При этом зачастую таких диаграмм меньше, чем процессов.

13.
При проектировании архитектуры модуля был использован паттерн MVC,позволяющий упростить внесение изменений в отдельные части модуля по сравнению с монолитной архитектурой. 
Контроллер запускает генерацию модели диаграммы. При этом происходит проход по AST. После этого контроллер передает модель в модуль разделения несвязанных моделей диаграмм. Результат деления - те список моделей - подается в генераторы текста диаграмм в формате GML или GraphML, в зависимости от типа диаграммы.

14.
Реализацию модуля решено выполнить в виде eclipse-плагина  с использованием технологий xtext и xtend для написания генератора.
Модель диаграммы представлена ассоциативным массивом вершин и списком ребер. При разделении моделей, алгоритм проходит по ребрам ориентированного графа.

Для использования модуля, следует запустить рефлекс ide. После написания кода программы, можно нажать кнопку сохранения файла, после чего автоматически сгенерируются диаграммы связи процессов по данным,по управлению и диаграммы состояний, которые можно увидеть в левой части изображения. Открывать их рекомендуется средством yed, поддерживающим автоматическую укладку графа и предоставляющим широкие возможности для редактирования. Также yEd предоставялет возможность быстрого перехода по ссылке, хранящейся в вершине диаграммы.

15.
В результате работы для языка Рефлекс был создан модуль генерации диаграмм связи процессов по данным,по управлению и диаграмм состояний, который автоматизирует создание графической документации и упрощает поддержку проектов на языке Рефлекс.
Практическая апробация показала, что использованияе модуля на несколько порядков сокращает время создания диаграмм (с нескольких часов до пары секунд) и гарантирует отсутствие ошибок, вызванных человеческим фактором.

16.
Работа была представлена докладом на МНСК в секции "Инструментальные и прикладные программные системы",также была подготовлена научная статья для для Международной научно-технической конференции “Автоматизация”.
На слайде представлен репозиторий проекта и контакты автора. Спасибо за внимание.

